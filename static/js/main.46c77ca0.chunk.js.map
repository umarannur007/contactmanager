{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","_Component","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","dispatch","setState","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","res","wrap","_context","prev","next","axios","get","sent","data","stop","react_default","createElement","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","delete","t0","_this2","_this$props$contact","name","email","phone","className","style","fontSize","cursor","onClick","float","color","bind","Link","to","fontWeight","Contacts","Fragment","contacts_Contact","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","defaultProps","AddContact","e","_e$target","target","defineProperty","onsubmit","_this$state","newContact","preventDefault","abrupt","post","history","push","_this$state2","onSubmit","layout_TextInputGroup","updContact","match","params","put","Header","branding","href","About","NotFound","Test","fetch","then","json","App","context_Provider","BrowserRouter","basename","process","layout_Header","Switch","Route","exact","path","component","EditContact","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46c77ca0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n        )\r\n      };\r\n    case \"ADD_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts]\r\n      };\r\n    case \"UPDATE_CONTACT\":\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact.id === action.payload.id\r\n            ? (contact = action.payload)\r\n            : contact\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport class Provider extends Component {\r\n  async componentDidMount() {\r\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users/\");\r\n    this.setState({ contacts: res.data });\r\n  }\r\n\r\n  state = {\r\n    contacts: [],\r\n    dispatch: action => this.setState(state => reducer(state, action))\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Context.Provider value={this.state}>\r\n        {this.props.children}\r\n      </Context.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n","import React, { Component } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\nimport { Consumer } from \"../../context\";\r\nimport axios from \"axios\";\r\n\r\nclass Contact extends Component {\r\n  state = {\r\n    showContactInfo: false\r\n  };\r\n\r\n  onDeleteClick = async (id, dispatch) => {\r\n    try {\r\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n      dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    } catch (e) {\r\n      dispatch({ type: \"DELETE_CONTACT\", payload: id });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { id, name, email, phone } = this.props.contact;\r\n    const { showContactInfo } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className={\"card card-body mb-3\"}>\r\n              <h4>\r\n                {name}\r\n                <i\r\n                  style={{ fontSize: \"30px\", cursor: \"pointer\" }}\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      showContactInfo: !this.state.showContactInfo\r\n                    });\r\n                  }}\r\n                >\r\n                  +\r\n                </i>\r\n\r\n                <i\r\n                  style={{\r\n                    fontSize: \"30px\",\r\n                    cursor: \"pointer\",\r\n                    float: \"right\",\r\n                    color: \"red\"\r\n                  }}\r\n                  onClick={this.onDeleteClick.bind(this, id, dispatch)}\r\n                >\r\n                  X\r\n                </i>\r\n\r\n                <Link to={`contact/edit/${id}`}>\r\n                  <i\r\n                    className={\"mr-3\"}\r\n                    style={{\r\n                      fontSize: \"30px\",\r\n                      cursor: \"pointer\",\r\n                      float: \"right\",\r\n                      fontWeight: \"bold\"\r\n                    }}\r\n                  >Edit</i>\r\n                </Link>\r\n\r\n              </h4>\r\n              {showContactInfo ? (\r\n                <ul className={\"list-group\"}>\r\n                  <li className={\"list-group-item\"}>Email: {email}</li>\r\n                  <li className={\"list-group-item\"}>Phone: {phone}</li>\r\n                </ul>\r\n              ) : null}\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nContact.propTypes = {\r\n  contact: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\nimport Contact from \"./Contact\";\r\nimport { Consumer } from \"../../context\";\r\n\r\nclass Contacts extends Component {\r\n  render() {\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { contacts } = value;\r\n          return (\r\n            <React.Fragment>\r\n              <h1 className=\"display-4 mb-2\">\r\n                <span className={\"text-danger\"}>Contact</span> List\r\n              </h1>\r\n              {contacts.map(contact => (\r\n                <Contact key={contact.id} contact={contact} />\r\n              ))}\r\n            </React.Fragment>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames';\r\n\r\nconst TextInputGroup = ({\r\n    name,\r\n    type,\r\n    value,\r\n    label,\r\n    placeholder,\r\n    onChange,\r\n    error\r\n}) => {\r\n    return(\r\n        <div className={\"form-group\"}>\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                className={classnames('form-control form-control-lg', {'is-invalid': error})}\r\n                type={type}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    )\r\n};\r\n\r\nTextInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nTextInputGroup.defaultProps = {\r\n  type: 'text'\r\n};\r\n\r\nexport default TextInputGroup;","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    error: {}\r\n  };\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  onsubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    if (name === \"\") {\r\n      this.setState({ error: { name: \"Name is required\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ error: { email: \"Email is required\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ error: { phone: \"Phone is required\" } });\r\n      return;\r\n    }\r\n\r\n    const newContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    const res = await axios.post(\r\n      \"https://jsonplaceholder.typicode.com/users/\",\r\n      newContact\r\n    );\r\n    dispatch({ type: \"ADD_CONTACT\", payload: res.data });\r\n    //Clear State\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      error: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone, error } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className={\"card mb-3\"}>\r\n              <div className={\"card-header\"}>Add Contact</div>\r\n              <div className={\"card-body\"}>\r\n                <form onSubmit={this.onsubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label={\"Name\"}\r\n                    name={\"name\"}\r\n                    placeholder={\"Enter Name...\"}\r\n                    value={name}\r\n                    error={error.name}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInputGroup\r\n                    label={\"Email\"}\r\n                    type={\"email\"}\r\n                    name={\"email\"}\r\n                    placeholder={\"Enter Email...\"}\r\n                    value={email}\r\n                    error={error.email}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInputGroup\r\n                    label={\"Phone\"}\r\n                    name={\"phone\"}\r\n                    placeholder={\"Enter Phone...\"}\r\n                    value={phone}\r\n                    error={error.phone}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={\"Add Contact\"}\r\n                    className={\"btn btn-block btn-light\"}\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Component } from \"react\";\r\nimport { Consumer } from \"../../context\";\r\nimport TextInputGroup from \"../layout/TextInputGroup\";\r\nimport axios from \"axios\";\r\n\r\nclass AddContact extends Component {\r\n  state = {\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    error: {}\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    const res = await axios.get(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`\r\n    );\r\n    const { name, email, phone } = res.data;\r\n    this.setState({\r\n      name,\r\n      email,\r\n      phone\r\n    });\r\n  }\r\n\r\n  onChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n  onsubmit = async (dispatch, e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, phone } = this.state;\r\n\r\n    if (name === \"\") {\r\n      this.setState({ error: { name: \"Name is required\" } });\r\n      return;\r\n    }\r\n    if (email === \"\") {\r\n      this.setState({ error: { email: \"Email is required\" } });\r\n      return;\r\n    }\r\n    if (phone === \"\") {\r\n      this.setState({ error: { phone: \"Phone is required\" } });\r\n      return;\r\n    }\r\n\r\n    const { id } = this.props.match.params;\r\n    const updContact = {\r\n      name,\r\n      email,\r\n      phone\r\n    };\r\n\r\n    const res = await axios.put(\r\n      `https://jsonplaceholder.typicode.com/users/${id}`,\r\n      updContact\r\n    );\r\n    dispatch({ type: \"UPDATE_CONTACT\", payload: res.data });\r\n\r\n    //Clear State\r\n    this.setState({\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      error: {}\r\n    });\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone, error } = this.state;\r\n    return (\r\n      <Consumer>\r\n        {value => {\r\n          const { dispatch } = value;\r\n          return (\r\n            <div className={\"card mb-3\"}>\r\n              <div className={\"card-header\"}>Add Contact</div>\r\n              <div className={\"card-body\"}>\r\n                <form onSubmit={this.onsubmit.bind(this, dispatch)}>\r\n                  <TextInputGroup\r\n                    label={\"Name\"}\r\n                    name={\"name\"}\r\n                    placeholder={\"Enter Name...\"}\r\n                    value={name}\r\n                    error={error.name}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInputGroup\r\n                    label={\"Email\"}\r\n                    type={\"email\"}\r\n                    name={\"email\"}\r\n                    placeholder={\"Enter Email...\"}\r\n                    value={email}\r\n                    error={error.email}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <TextInputGroup\r\n                    label={\"Phone\"}\r\n                    name={\"phone\"}\r\n                    placeholder={\"Enter Phone...\"}\r\n                    value={phone}\r\n                    error={error.phone}\r\n                    onChange={this.onChange}\r\n                  />\r\n                  <input\r\n                    type=\"submit\"\r\n                    value={\"Update Contact\"}\r\n                    className={\"btn btn-block btn-light\"}\r\n                  />\r\n                </form>\r\n              </div>\r\n            </div>\r\n          );\r\n        }}\r\n      </Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = props => {\r\n  const { branding } = props;\r\n  return (\r\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          {branding}\r\n        </a>\r\n        <div>\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\" className=\"nav-link\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/contact/add\" className=\"nav-link\">\r\n                Add\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/about\" className=\"nav-link\">\r\n                About\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.defaultProps = {\r\n  branding: \"My App\"\r\n};\r\n\r\nHeader.propTypes = {\r\n  branding: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h1 className={\"display-4\"}>About Contact Manager</h1>\r\n      <p className={\"lead\"}>Simple app to manage contacts</p>\r\n      <p className=\"text-secondary\">Version 1.0.0</p>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-4\">\r\n        <span className={\"text-danger\"}>404</span>, Page Not Found\r\n      </h1>\r\n      <p className=\"lead\">Sorry, that page does not exist</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\n\nclass Test extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n      .then(res => res.json())\n      .then(data =>\n        this.setState({ name: data.name, email: data.email, phone: data.phone })\n      );\n  }\n\n  // componentWillMount() {\n  //   console.log('componentWillMount...');\n  // }\n\n  // componentDidUpdate() {\n  //   console.log('componentDidUpdate...');\n  // }\n\n  // componentWillUpdate() {\n  //   console.log('componentWillUpdate...');\n  // }\n\n  // componentWillReceiveProps(nextProps, nextState) {\n  //   console.log('componentWillReceiveProps...');\n  // }\n\n  // static getDerivedStateFromProps(nextProps, prevState) {\n  //   return {\n  //     test: 'something'\n  //   };\n  // }\n\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log(' getSnapshotBeforeUpdate...');\n  // }\n\n  render() {\n    const { name, email, phone } = this.state;\n    return (\n      <div>\n        <h1>{name}</h1>\n        <p>{email}</p>\n        <p>{phone}</p>\n      </div>\n    );\n  }\n}\n\nexport default Test;","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\nimport Header from \"./components/layout/Header\";\nimport About from \"./components/pages/About\";\nimport NotFound from \"./components/pages/NotFound\";\nimport Test from \"./components/test/Test\";\n\nimport { Provider } from \"./context\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div className=\"App\">\n            <Header branding=\"Contact Manager\" />\n            <div className={\"container\"}>\n              <Switch>\n                <Route exact path={\"/\"} component={Contacts} />\n                <Route exact path={\"/about\"} component={About} />\n                <Route exact path={\"/contact/add\"} component={AddContact} />\n                <Route exact path={\"/contact/edit/:id\"} component={EditContact} />\n                <Route exact path={\"/test\"} component={Test} />\n                <Route component={NotFound} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}